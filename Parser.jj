PARSER_BEGIN(Parser)


/** ID lister. */
public class Parser {

  /** Main entry point. */
  public static void main(String args[]){
    Parser parser = new Parser(System.in);
    ASTNode exp;
    while (true) {
      try {
        exp = parser.Start();
        System.out.println(exp.eval());
      }catch(Exception e){
        System.out.println("Syntax Error!");
        parser.ReInit(System.in);
      }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
  | "\t"
  | "\r"
}

TOKEN :
{
  < NUM: ["1"-"9"] (["0"-"9"])* >
  | < PLUS : "+"    >
  | < MINUS: "-"    >
  | < TIMES: "*"    >
  | < DIV:   "/"    >
  | < EL:    "\n"   >
  | < LPAR:  "("    >
  | < RPAR:  ")"    >
  | < OR:    "||"   >
  | < AND:   "&&"   >
  | < EQ:    "=="   >
  | < GT:    ">"    >
  | < GET:   ">="   >
  | < LT:    "<"    >
  | < LET:   "<="   >
  | < IF:    "?"    >
  | < ELSE:  ":"    >
  | < NOT:   "!"    >
  | < NOTE:  "!="   >
  | < TRUE:  "true" >
  | < FALSE: "false">
}

ASTNode Start():
{
  ASTNode t1, t2;
}
{
  t1 = ELog() <EL>
  {
    return t1;
  }
}

ASTNode ELog():
{
  ASTNode t1, t2;
}
{
  t1 = TLog() ( <AND> t2 = TLog()
  {
    t1 = new ASTAnd(t1, t2);
  })*
  {
    return t1;
  }
}

ASTNode TLog():
{
  ASTNode t1, t2;
}
{
  t1 = Ecmp() ( <OR> t2 = Ecmp()
  {
    t1 = new ASTOr(t1, t2);
  })*
  {
    return t1;
  }
}

ASTNode Ecmp():
{
  Token op;
  ASTNode t1, t2;
}
{
  t1 = Ecard() ( (op = <EQ> | op = <NOTE> | op = <GT> | op = <GET> | op = <LT> | op = <LET> ) t2 = Ecard()
  {
    if (op.kind == EQ )
      t1 = new ASTEquals(t1,t2);
    else if (op.kind == NOTE )
      t1 = new ASTNotEquals(t1,t2);
    else if (op.kind == GT )
      t1 = new ASTGthen(t1,t2);
    else if (op.kind == GET )
      t1 = new ASTGEthen(t1,t2);
    else if (op.kind == LT )
      t1 = new ASTLthen(t1,t2);
    else
      t1 = new ASTLEthen(t1,t2);
  })?
  {
    return t1;
  }
}

ASTNode Ecard():
{
  ASTNode t1, t2, t3;
}
{
  t1 = Exp() ( <IF> t2 = Exp() <ELSE> t3 = Exp()
  {
    t1 = new ASTIf(t1,t2,t3);
  })?
  {
    return t1;
  }
}

ASTNode Exp():
{
  Token op;
  ASTNode t1, t2;
}
{
  t1 = Term() ( ( op = <PLUS> | op = <MINUS> ) t2 = Term()
  {
    if (op.kind == PLUS)
      t1 = new ASTPlus(t1,t2);
    else
      t1 = new ASTSub(t1,t2);
  })*
  {
    return t1;
  }
}

ASTNode Term():
{
  Token op;
  ASTNode t1, t2;
}
{
  t1 = Fact() ( ( op = <TIMES> | op = <DIV> ) t2 = Fact()
  {
    if (op.kind == TIMES)
      t1 = new ASTMul(t1,t2);
    else
      t1 = new ASTDiv(t1,t2);
   })*
  {
    return t1;
  }

}

ASTNode Fact() :
{
  Token n;
  ASTNode t;
}
{
  n=<NUM> {return new ASTNum(Integer.parseInt(n.image)); }
  | <LPAR> t=ELog() <RPAR>{return t;}
  | <NOT> t=ELog() {return new ASTNot(t);}
  | (n=<TRUE>|n=<FALSE>) {return new ASTBool(n.image); }
  | <MINUS> n=<NUM> { return new ASTNeg(Integer.parseInt(n.image)); }
}



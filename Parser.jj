PARSER_BEGIN(Parser)

import java.io.*;
import java.util.*;

public class Parser { }

PARSER_END(Parser)

SKIP :
{
  " "
  | "\t"
  | "\n"
}

TOKEN :
{
  < EL      : ";;\n"   >
  | < DECL  : "decl"   >
  | < WHILE : "while"  >
  | < FUN   : "fun"    >
  | < DO    : "do"     >
  | < NEW   : "new"    >
  | < IN    : "in"     >
  | < END   : "end"    >
  | < IF    : "if"     >
  | < THEN  : "then"   >
  | < ELSE  : "else"   >
  | < PRNT  : "print"  >
  | < PRNTLN: "println">
  | < COMM  : ","      >
  | < PLUS  : "+"      >
  | < MINUS : "-"      >
  | < TIMES : "*"      >
  | < DIV   : "/"      >
  | < LPAR  : "("      >
  | < RPAR  : ")"      >
  | < OR    : "||"     >
  | < AND   : "&&"     >
  | < COL   : ":"      >
  | < ASS   : ":="     >
  | < EQEQ  : "=="     >
  | < EQ    : "="      >
  | < GT    : ">"      >
  | < GET   : ">="     >
  | < LT    : "<"      >
  | < LET   : "<="     >
  | < IFC   : "?"      >
  | < DEREF : "!"      >
  | < NOT   : "~"      >
  | < NOTE  : "!="     >
  | < SEMI  : ";"      >
  | < LBRACK: "["      >
  | < RBRACK: "]"      >
  | < DOT   : "."      >
  | < NUM   : (["0"-"9"])+                                   >
  | < BOOL  : ("true"|"false")                               >
  | < ID    : ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* >
}

ASTNode Prog():
{
  ASTNode t;
}
{
  t = SExp() <EL>
  {
    return t;
  }
}

ASTNode SExp():
{
  ASTNode t1, t2;
}
{
  t1 = LAss() ( <SEMI> t2 = LAss()
  {
    t1 = new ASTMultiple(t1, t2);
  })*
  {
    return t1;
  }
}

ASTNode LAss():
{
  ASTNode t1, t2;
}
{
  t1 = LExp() ( <ASS> t2 = LExp()
  {
    t1 = new ASTAssi(t1, t2);
  })?
  {
    return t1;
  }
}

ASTNode LExp():
{
  ASTNode t1, t2;
}
{
  t1 = LTerm() ( <OR> t2 = LTerm()
  {
    t1 = new ASTOr(t1, t2);
  })*
  {
    return t1;
  }
}

ASTNode LTerm():
{
  ASTNode t1, t2;
}
{
  t1 = LFact() ( <AND> t2 = LFact()
  {
    t1 = new ASTAnd(t1, t2);
  })*
  {
    return t1;
  }
}

ASTNode LFact():
{
  ASTNode t1;
}
{
  (t1 = LCmp() | <NOT> t1 = LFact()
  {
    t1 = new ASTNot(t1);
  })
  {
    return t1;
  }
}

ASTNode LCmp():
{
  Token op;
  ASTNode t1, t2;
}
{
  t1 = Exp() ( (op = <EQEQ> | op = <NOTE> | op = <GT> | op = <GET> | op = <LT> | op = <LET> ) t2 = Exp()
  {
    if (op.kind == EQEQ )
      t1 = new ASTEquals(t1, t2);
    else if (op.kind == NOTE )
      t1 = new ASTNotEquals(t1, t2);
    else if (op.kind == GT )
      t1 = new ASTGthen(t1, t2);
    else if (op.kind == GET )
      t1 = new ASTGEthen(t1, t2);
    else if (op.kind == LT )
      t1 = new ASTLthen(t1, t2);
    else
      t1 = new ASTLEthen(t1, t2);
  })*
  {
    return t1;
  }
}

ASTNode Exp():
{
  Token op;
  ASTNode t1, t2;
}
{
  t1 = Term() ( ( op = <PLUS> | op = <MINUS> ) t2 = Term()
  {
    if (op.kind == PLUS)
      t1 = new ASTPlus(t1, t2);
    else
      t1 = new ASTSub(t1, t2);
  })*
  {
    return t1;
  }
}

ASTNode Term():
{
  Token op;
  ASTNode t1, t2;
}
{
  t1 = Fact() ( ( op = <TIMES> | op = <DIV> ) t2 = Fact()
  {
    if (op.kind == TIMES)
      t1 = new ASTMul(t1, t2);
    else
      t1 = new ASTDiv(t1, t2);
  })*
  {
    return t1;
  }
}

ASTNode Fact():
{
  Token n;
  ASTNode t1, t2, t3;
  Vector<Binding> ve;
  Vector<String>  vs;
}
{
  ( <MINUS>  n  = <NUM>  { t1 = new ASTNeg(Integer.parseInt(n.image)); }
  | <DEREF>  t1 = Fact() { t1 = new ASTDeref(t1); }
  | <NEW>    t1 = Fact() { t1 = new ASTNew(t1); }
  | <PRNT>   t1 = Fact() { t1 = new ASTPrint(t1); }
  | <PRNTLN> t1 = Fact() { t1 = new ASTPrintln(t1); }
  | t1 = SFact() ( t1 = CFact(t1) )?
  | <WHILE> t1 = SExp() <DO> t2 = SExp() <END> { t1 = new ASTWhile(t1, t2); }
  | <IF> t1 = SExp() <THEN> t2 = SExp() <ELSE> t3 = SExp() <END> { t1 = new ASTIf(t1, t2, t3); }
  | <FUN> { vs = new Vector<String>(); }
      (
        ( n = <ID> { vs.addElement(n.image); } )
        ( <COMM> n = <ID> { vs.addElement(n.image); } )*
      )?
    <EQ><GT>
      t2 = SExp()
    <END> { t1 = new ASTFun(vs, t2); }
  | <DECL> { ve = new Vector<Binding>(); }
      ( n = <ID> <EQ> t1 = SExp() { ve.addElement(new Binding(n.image, t1)); } )*
    <IN>
      t2 = SExp()
    <END> { t1 = new ASTDecl(ve, t2); }
  | <LBRACK>
      { ve = new Vector<Binding>(); }
      (
        ( n = <ID> <EQ> t1 = SExp() { ve.addElement(new Binding(n.image, t1)); } )
        ( <COMM> n = <ID> <EQ> t1 = SExp() { ve.addElement(new Binding(n.image, t1)); } )*
      )?
    <RBRACK> { t1 = new ASTRecord(ve); }
  )
  {
    return t1;
  }
}

ASTNode SFact():
{
  Token n;
  ASTNode t1;
}
{
  ( n = <NUM>  { t1 = new ASTNum(Integer.parseInt(n.image)); }
  | n = <ID>   { t1 = new ASTId(n.image); }
  | n = <BOOL> { t1 = new ASTBool(n.image); }
  | <LPAR>  t1 = SExp() <RPAR>
  )
  {
    return t1;
  }
}

ASTNode CFact(ASTNode s):
{
  Token op;
  ASTNode t1, t2;
  Vector<ASTNode> v;
}
{
  ( <LPAR> { v = new Vector<ASTNode>(); }
    (
      ( t2 = SExp() { v.addElement(t2); } )
      ( <COMM> t2 = SExp() { v.addElement(t2); } )*
    )?
    <RPAR> { t1 = new ASTCall(v, s); }
  t1 = SFact() ( t1 = CFact(t1) )?
  | <DOT> t1 = SFact() { t1 = new ASTGetRec(t1, s); }
  | <IFC> t1 = SExp() <COL> t2 = Fact() { t1 = new ASTIf(s, t1, t2); }
  )
  {
    return t1;
  }
}
